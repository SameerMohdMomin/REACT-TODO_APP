{"version":3,"sources":["component/TodoContext.js","component/Form.js","component/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Contextp","createContext","TodoContext","props","useState","fullname","fulljob","todo","settodo","Provider","value","children","Form","name","setname","job","setjob","useContext","onSubmit","e","preventDefault","PrevTodo","type","onChange","target","Todo","map","td","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAEaA,EAASC,0BAETC,EAAc,SAACC,GAAU,IAAD,EAEZC,mBAAS,CAC1B,CACIC,SAAS,SACTC,QAAQ,0BALiB,mBAE3BC,EAF2B,KAErBC,EAFqB,KAUjC,OAEI,cAACR,EAASS,SAAV,CAAmBC,MAAO,CAAEH,EAAMC,GAAlC,SACKL,EAAMQ,Y,OCoBJC,EAlCJ,WAAK,IAAD,EAEWR,mBAAS,IAFpB,mBAEJS,EAFI,KAEEC,EAFF,OAGSV,mBAAS,IAHlB,mBAGJW,EAHI,KAGCC,EAHD,OAKWC,qBAAWjB,GALtB,mBAKEQ,GALF,WAsBX,OAEI,8BACI,uBAAMU,SATO,SAACC,GAClBA,EAAEC,iBACFZ,GAAQ,SAACa,GAAD,4BAAkBA,GAAlB,CAA4B,CAAEhB,SAAUQ,EAAMP,QAASS,SAO3D,UACI,uBAAOO,KAAK,OAAOT,KAAK,OAAOH,MAAOG,EAAMU,SAnBvC,SAACJ,GACdL,EAAQK,EAAEK,OAAOd,UAmBT,uBAAOY,KAAK,OAAOT,KAAK,MAAOH,MAAOK,EAAKQ,SAhBvC,SAACJ,GACbH,EAAOG,EAAEK,OAAOd,UAgBR,uBAAOY,KAAK,SAAST,KAAK,mBCb3BY,EAfF,WAAO,IAAD,EAEMR,qBAAWjB,GAFjB,mBAETO,EAFS,UAIf,OACG,8BACKA,EAAKmB,KAAI,SAAAC,GAAE,OACR,+BAAKA,EAAGtB,SAAR,MAAqBsB,EAAGrB,iBCOxBsB,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,EAAD,WACI,cAAC,EAAD,IACA,cAAC,EAAD,UCCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d0061ec5.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\r\n\r\nexport const Contextp=createContext();\r\n\r\nexport const TodoContext = (props) =>{\r\n    \r\n    const[todo, settodo]=useState([\r\n        {\r\n            fullname:\"sameer\",\r\n            fulljob:\"full stact developer\"\r\n        }\r\n    ]);\r\n\r\n\r\n    return(\r\n\r\n        <Contextp.Provider value={[ todo, settodo ]}>\r\n            {props.children}\r\n        </Contextp.Provider>\r\n\r\n    );\r\n    };\r\n\r\n","import React, { useContext, useState } from 'react';\r\nimport {Contextp} from './TodoContext';\r\n\r\nconst Form=()=>{\r\n\r\n    const [name, setname]=useState(\"\");\r\n    const [job, setjob]=useState(\"\");\r\n\r\n    const [todo, settodo]=useContext(Contextp);\r\n\r\n    const handlename=(e)=>{\r\n        setname(e.target.value);\r\n    }\r\n    \r\n    const handlejob=(e)=>{\r\n        setjob(e.target.value);\r\n    }\r\n\r\n    \r\n    const handlesubmit = (e) => {\r\n        e.preventDefault();\r\n        settodo((PrevTodo) => [...PrevTodo, { fullname: name, fulljob: job }]);\r\n        \r\n      };\r\n\r\n    return(\r\n\r\n        <div>\r\n            <form onSubmit={handlesubmit}>\r\n                <input type=\"text\" name=\"name\" value={name} onChange={handlename} />\r\n                <input type=\"text\" name=\"job\"  value={job} onChange={handlejob} />\r\n                <input type=\"submit\" name=\"add todo\" />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React, { useContext } from 'react';\r\nimport {Contextp} from './TodoContext';\r\n\r\nconst Todo = () => {\r\n    \r\n    const[todo, settodo]=useContext(Contextp);\r\n\r\n    return(\r\n       <div>\r\n           {todo.map(td => (\r\n               <h2>{td.fullname} | {td.fulljob}</h2>\r\n           ))}\r\n       </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Todo;","\nimport './App.css';\nimport {TodoContext} from './component/TodoContext';\nimport Form from './component/Form';\nimport Todo from './component/Todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoContext>\n          <Form/>\n          <Todo/>\n      </TodoContext>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}